#!/bin/tcsh -f
# Tyler Blazey, Winter 2011/2012

#Check for dependencies
if ( ! -e $FSLDIR ) then
	echo "Set FSLDIR before running script"
	exit 1
endif
if ( ! -e $FREESURFER_HOME ) then
	echo "Set FREESURFER_HOME before running script"
	exit 1
endif

#Usage
set program = $0:t
if ( $#argv == 0 ) then
	echo ""
	echo "${program}: A basic fcMRI preprocessing script"
	echo ""
	echo "Usage:"
	echo ""
	echo "Required Arguments:"
	echo "	-bold: <bold> 		Nifti bold image."
	echo " 	-subj: <subj> 		Freesurfer subject ID."
	echo "	-mag: <mag>		Nifti field map magnitude image."
	echo "	-phase: <phase>		Nifti field map phase image."
	echo "	-te: <te>		Bold echo time."
	echo "	-trep: <trep>	Bold repetition time." 
	echo "	-dwell: <dwell>		Diffusion dwell time."
	echo "	-delta: <delta>		Difference between field map echo times."
	echo ""
	echo "Optional Arguments:"
	echo "	-nodist			No distortion correction. No longer need to specify -mag, -phase, -te, -dwell, and -delta."		
	echo "	-root <root>		Root for outputed files. Default is FreeSufer Subject ID"
	echo "	-bthresh <thresh>	Threshold for BET masking. Default is 0.1."
	echo '	-subjdir <dir>		FreeSurfer subjects directory. Default is current.'
	echo "	-outdir <outdir>	Output directory. Default is <root>"
	echo "	-fwhm <fwhm>		Smooth bold data by specified fwhm. Default is 5mm."
	echo "	-hpass <secs> 		High pass filter in seconds. Default is 50. Use a negative value to skip."
	echo "	-lpass <secs>		Low pass filter in seconds. Skipped by Default. Use a negative value to skip."
	echo "	-stcf <file>		Turn on slice time correction. Must input a volume ordering file."
	echo "	-wbreg			Turn on whole brain regressor. Off by default."
	echo "	-force			Run command even if output exists."
	echo "	-debug			Turn on set echo."
	echo ""
	exit
endif

#Set defaults
set fwhm = 5; set hpass = 50; set lpass = -1.0; set bthresh = 0.1;

#Parse arguments
set args = ( $argv )
while ( $#argv > 0 )
	set flag = $argv[1]; shift;
	switch ( $flag )
		case -bold:
			set bold = `$FSLDIR/bin/remove_ext $argv[1]`; shift; breaksw;
		case -subj:
			set subj = $argv[1]; shift; breaksw;
		case -root:
			set root = $argv[1]; shift; breaksw;
		case -fwhm:
			set fwhm = $argv[1]; shift; breaksw;
		case -stcf:
			if ( ! -e $argv[1] ) then
				echo "Cannot find -stcf file at $argv[1]."
				exit 1
			endif
			set stcf = $argv[1]; shift; breaksw;
		case -mag:
			set mag = `$FSLDIR/bin/remove_ext $argv[1]`; shift; breaksw;
		case -phase:
			set phase = `$FSLDIR/bin/remove_ext $argv[1]`; shift; breaksw;
		case -te:
			set te = $argv[1]; shift; breaksw;
		case -dwell:
			set dwell = $argv[1]; shift; breaksw;
		case -delta:
			set delta = $argv[1]; shift; breaksw;
		case -nodist:
			set nodist = 1; breaksw;
		case -bthresh:
			set bthresh = $argv[1]; shift; breaksw;
		case -trep:
			set trep = $argv[1]; shift; breaksw;
		case -hpass:
			set hpass = $argv[1]; shift; breaksw;
		case -lpass:
			set lpass = $argv[1]; shift; breaksw;
		case -subjdir:
			if ( ! -d $argv[1] ) then
				echo "Cannot find directory $argv[1]."
				exit 1
			else
				setenv SUBJECTS_DIR $argv[1]; shift; breaksw;
			endif
		case -force:
			set force = 1; breaksw;
		case -outdir:
			set outdir = $argv[1]; shift; breaksw; 
		case -debug:
			set debug = 1; breaksw;
		case -wbreg:
			set wbreg =1: breaksw;
		default:
			"Option $flag not recognized. See usage"
			exit 1
	endsw
end
if ( $?debug == 1 ) set echo

#Check to make sure all required options have been set
if ( $?nodist == 1 && ( $?bold == 0 || $?subj == 0 || $?trep == 0 ) ) then
	echo "Missing required arguments. See usage."
	exit 1
else if ( $?nodist == 0 && ( $?bold == 0 || $?subj == 0 || $?trep == 0 || $?mag == 0 || \
			$?phase == 0 || $?te == 0 || $?dwell == 0 || $?delta == 0 ) ) then
	echo "Missing required arguments. See usage."
	exit 1
endif

#Check to see subject is within SUBJECTS_DIR
if ( ! -e $SUBJECTS_DIR/$subj ) then
	echo "Cannot find subject: $subj within SUBJECTS_DIR: $SUBJECTS_DIR"
	exit 1
endif

#Make sure there is an fsaverage in the SUBJECTS_DIR
if ( ! -d $SUBJECTS_DIR/fsaverage ) then
	ln -s $FREESURFER_HOME/subjects/fsaverage $SUBJECTS_DIR/fsaverage
endif

#Setup output
if ( $?root == 0 ) set root = $subj
if ( $?outdir == 0) set outdir = ${root};
if ( ! -d $outdir ) mkdir -p $outdir

#Create log file
set log = $outdir/${program}.log
if ( ! -e $log ) then
	touch $log
	set runnum = 1
else
	set oldruns = `grep -c "Run Number:" $log`
	set runnum = `echo "$oldruns + 1" | bc`
endif
echo ""|& tee -a $log
echo "#######################################" |& tee -a $log
echo "#######################################" |& tee -a $log
echo "" |& tee -a $log
echo "Program: ${program}" |& tee -a $log
echo "Run Number: $runnum" |& tee -a $log
echo "Outdir: $outdir" |& tee -a $log
echo "Outroot: $root" |& tee -a $log
echo "Start Time: `date '+%Y-%m-%d-%I-%M-%S'`" |& tee -a $log
echo "User: `whoami`" |& tee -a $log
echo "System Info: `uname -a`" |& tee -a $log
echo "Working Directory `pwd`" |& tee -a $log
echo "Input arguments: $args" |& tee -a $log
echo "FREESURFER_HOME: $FREESURFER_HOME" |& tee -a $log
echo "Freesurfer Version: `more $FREESURFER_HOME/build-stamp.txt`" |& tee -a $log
echo "SUBJECTS_DIR: $SUBJECTS_DIR" |& tee -a $log
echo "FreeSurfer Subject ID: $subj" |& tee -a $log
echo "FSLDIR: $FSLDIR" |& tee -a $log
echo "FSL Version: `more $FSLDIR/etc/fslversion`" |& tee -a $log
echo "" | & tee -a $log
echo "#######################################" |& tee -a $log
echo "#######################################" |& tee -a $log
echo "" |& tee -a $log


#########################
###BOLD Pre-Processing###
#########################
set bdir = $outdir/bold; if ( ! -d $bdir ) mkdir $bdir; set bout = $bdir/$root;

#Copy over input image to bold directory
if ( ! -e ${bout}_bold.nii.gz || $?force == 1 ) then
	set cmd = ( cp ${bold}.nii.gz ${bout}_bold.nii.gz )
	echo $cmd |& tee -a $log; $cmd |& tee -a $log
endif
set bpre = "${bout}_bold"

#Use FSL to remove 4 frames
if ( ! -e ${bpre}_eq.nii.gz || $?force == 1 ) then
	@ vols = `$FSLDIR/bin/fslval ${bpre} dim4` - 4
	set cmd = ( $FSLDIR/bin/fslroi ${bpre} ${bpre}_eq 4 $vols )
	echo $cmd |& tee -a $log; $cmd |& tee -a $log
endif
set bpre = "${bpre}_eq"

if ( ! -e ${bpre}_stdev.nii.gz || $?force == 1 ) then
	set cmd = ( $FSLDIR/bin/fslmaths ${bpre} -Tstd ${bpre}_stdev )
	echo $cmd |& tee -a $log; $cmd |& tee -a $log
endif
	
#If user wants, use FSL to due slicetime correction
if ( $?stcf == 1 && ( ! -e ${bpre}_stc.nii.gz || $?force == 1 ) ) then
	set cmd = ( $FSLDIR/bin/slicetimer -i ${bpre} -o ${bpre}_stc --ocustom=$stcf -r $trep )
	echo $cmd |& tee -a $log; $cmd |& tee -a $log
	set bpre = "${bpre}_stc"
endif

if ( $?nodist == 0 ) then
	#Make folders for distortion correction
	set udir = $bdir/undist; if ( ! -d $udir ) mkdir $udir; set uout = $udir/${root}
	
	#Calculat middle frame
	set nvols = `$FSLDIR/bin/fslval ${bpre} dim4`
	set refvol = `echo "$nvols / 2" | bc`
	
	#Run distortion/motion correction
	if ( ! -e ${uout}_epi_undist_mcf.nii.gz || $?force == 1 ) then
		set cmd = ( epi_unwarp -m $mag -p $phase -e ${bpre} -dwell $dwell -te $te -delta $delta )
		set cmd = ( $cmd -epibet $bthresh -boldmc -o $udir -r ${root} -debug -frame $refvol )
		echo $cmd |& tee -a $log; $cmd |& tee -a $log
	endif
	set bpre = "${bpre}_undist_mcf"
	set mcf = "${bpre}"
	
	#Copy over motion correction outputs
	foreach mfile ( .mat _abs.rms _abs_mean.rms .par _rel.rms _rel_mean.rms )
		if ( ! -e ${mcf}${mfile} || $?force == 1 ) then
			if ( $mfile == .mat ) then
				set cmd = ( cp -r ${uout}_mcf${mfile} ${mcf}${mfile} )
			else 
				set cmd = ( cp ${uout}_mcf${mfile} ${mcf}${mfile} )
			endif
			echo $cmd |& tee -a $log; $cmd |& tee -a $log
		endif
	end
	
	#Copy over undistorted reference
	if ( ! -e ${bpre}_ref.nii.gz || $?force == 1 ) then
			set cmd = ( $FSLDIR/bin/imcp ${uout}_epi_${refvol}_undist ${bpre}_ref.nii.gz )
			echo $cmd |& tee -a $log; $cmd |& tee -a $log
	endif
	
	#Copy over brain mask (generated from magnitude image)
	if ( ! -e ${bpre}_ref_brain_mask.nii.gz || $?force == 1 ) then
		set cmd = ( $FSLDIR/bin/imcp ${uout}_mag_brain_mask_to_${root}_epi_${refvol}_brain )
		set cmd = ( $cmd ${bpre}_ref_brain_mask )
		echo $cmd |& tee -a $log; $cmd |& tee -a $log
	endif
	set bold_mask = "${bpre}_ref_brain_mask.nii.gz"
	
	#Apply brain mask
	if ( ! -e ${bpre}_ref_brain.nii.gz || $?force == 1 ) then
		set cmd = ( $FSLDIR/bin/fslmaths ${bpre}_ref -mas ${bpre}_ref_brain_mask ${bpre}_ref_brain )
		echo $cmd |& tee -a $log; $cmd |& tee -a $log
	endif
	set bold_ref = "${bpre}_ref_brain.nii.gz"
	
	#Copy over the whole undistorted series
	if ( ! -e ${bpre}_brain.nii.gz || $?force == 1 ) then
		set cmd = ( $FSLDIR/bin/imcp ${uout}_epi_undist_mcf ${bpre}_brain )
		echo $cmd |& tee -a $log; $cmd |& tee -a $log
	endif
	set bpre = "${bpre}_brain"
else

	#Use FSL to extract reference frame
	set nvols = `$FSLDIR/bin/fslval ${bpre} dim4`
	set refvol = `echo "$nvols / 2" | bc`
	if ( ! -e ${bpre}_ref.nii.gz || $?force == 1 ) then
		set cmd = ( $FSLDIR/bin/fslroi ${bpre} ${bpre}_ref.nii.gz $refvol 1 )
		echo $cmd |& tee -a $log; $cmd |& tee -a $log
	endif

	#Use FSL to get brain mask from reference frame
	if ( ! -e ${bpre}_ref_brain.nii.gz || $?force == 1 ) then
		set cmd = ( $FSLDIR/bin/bet ${bpre}_ref ${bpre}_ref_brain -F )
		echo $cmd |& tee -a $log; $cmd |& tee -a $log
	endif
	set bold_ref = "${bpre}_ref_brain.nii.gz"
	set bold_mask = "${bpre}_ref_brain_mask.nii.gz"

	#Use FSL to do motion correction
	if ( ! -d ${bpre}_mcf.mat || $?force == 1 ) then
		set cmd = ( $FSLDIR/bin/mcflirt -in ${bpre} -refvol $refvol -mats -plots -rmsrel -rmsabs )
		echo $cmd |& tee -a $log; $cmd |& tee -a $log
	endif
	set bpre = "${bpre}_mcf"
	set mcf = "${bpre}"

	#Use FSL to mask 4D data
	if ( ! -e ${bpre}_brain.nii.gz || $?force == 1 ) then
		set cmd = ( $FSLDIR/bin/fslmaths ${bpre} -mas $bold_mask ${bpre}_brain )
		echo $cmd |& tee -a $log; $cmd |& tee -a $log
	endif
	set bpre = "${bpre}_brain"
endif

#Use Fresurfer to spatially smooth data by specified fwhm
if ( ! -e ${bpre}_${fwhm}fwhm.nii.gz || $?force == 1 ) then
	set cmd = ( $FREESURFER_HOME/bin/mri_fwhm --i ${bpre}.nii.gz --o ${bpre}_${fwhm}fwhm.nii.gz )
	set cmd = ( $cmd --mask $bold_mask --smooth-only --fwhm 5 )
	echo $cmd |& tee -a $log; $cmd |& tee -a $log
endif
set bpre = "${bpre}_${fwhm}fwhm"

#Use FSL to do grand mean normalization
if ( ! -e ${bpre}_norm.nii.gz || $?force == 1 ) then
	set int_fifty = `$FSLDIR/bin/fslstats ${bpre} -k $bold_mask -p 50`
	set scale = `echo "scale=5; 10000 / $int_fifty" | bc -l`
	set cmd = ( $FSLDIR/bin/fslmaths ${bpre} -mul $scale ${bpre}_norm )
	echo $cmd |& tee -a $log; $cmd |& tee -a $log
endif
set bpre = "${bpre}_norm"

#Use FSL to do temporal filtering
if ( ! -e ${bpre}_bptf.nii.gz || $?force == 1 ) then
	set lp_vol = `echo "scale=5; $lpass / $trep" | bc -l`
	set hp_vol = `echo "scale=5; $hpass / $trep" | bc -l`
	set cmd = ( $FSLDIR/bin/fslmaths ${bpre} -bptf $hp_vol $lp_vol ${bpre}_bptf )
	echo $cmd |& tee -a $log; $cmd |& tee -a $log
endif
set bpre = "${bpre}_bptf"

########################
###Atlas Registration###
########################
set adir = $outdir/atlas; if ( ! -d $adir ) mkdir $adir; set aout = $adir/$root;

#Convert and reorient FreeSurfer images
foreach free_image ( $SUBJECTS_DIR/$subj/mri/brainmask.mgz $SUBJECTS_DIR/$subj/mri/T1.mgz )	
	#Use FreeSurferConvert image to nifti
	if ( ! -e ${aout}_${free_image:r:t}.nii.gz || $?force == 1 ) then
		set cmd = ( $FREESURFER_HOME/bin/mri_convert $free_image ${aout}_${free_image:r:t}.nii.gz )
		echo $cmd |& tee -a $log; $cmd |& tee -a $log
	endif
	
	#Use FSL to reorient image to MNI standard orientation
	if ( ! -e ${aout}_${free_image:r:t}_std.nii.gz || $?force == 1 ) then
		set cmd = ( $FSLDIR/bin/fslreorient2std ${aout}_${free_image:r:t} )
		set cmd = ( $cmd ${aout}_${free_image:r:t}_std )
		echo $cmd |& tee -a $log; $cmd |& tee -a $log
	endif
end

#Use FreeSurfer to get bold to T1 transform
if ( ! -e ${aout}_bold_to_free.mat || $?force == 1 ) then
	set cmd = ( $FREESURFER_HOME/bin/bbregister --mov $bold_ref )
	set cmd = ( $cmd --s $subj --reg ${aout}_bold_to_free.dat --init-fsl --bold )
	set cmd = ( $cmd --o ${aout}_bold_to_free.nii.gz --fslmat ${aout}_bold_to_free.mat )
	echo $cmd |& tee -a $log; $cmd |& tee -a $log
endif

#Use FSL to invert bold to T1 transform
if ( ! -e ${aout}_free_to_bold.mat || $?force == 1 ) then
	set cmd = ( $FSLDIR/bin/convert_xfm -inverse ${aout}_bold_to_free.mat )
	set cmd = ( $cmd -omat ${aout}_free_to_bold.mat )
	echo $cmd |& tee -a $log; $cmd |& tee -a $log
endif

#Use FreeSurfer to get a reorientation to MNI standard matrix
if ( ! -e ${aout}_free_to_std.mat || $?force == 1 ) then
	set cmd = ( tkregister2 --mov ${aout}_T1.nii.gz --targ ${aout}_T1_std.nii.gz )
  	set cmd =  ($cmd --regheader --noedit --fslregout ${aout}_free_to_std.mat )
  	set cmd = ( $cmd --reg ${aout}_std_to_free_reg )
  	echo $cmd |& tee -a $log; $cmd |& tee -a $log
endif

#Use FSL to get a reoriented bold to free transform
if ( ! -e ${aout}_bold_to_free_std.mat || $?force == 1 ) then
	set cmd = ( $FSLDIR/bin/convert_xfm -omat ${aout}_bold_to_free_std.mat )
	set cmd = ( $cmd -concat  ${aout}_free_to_std.mat ${aout}_bold_to_free.mat  )
	echo $cmd |& tee -a $log; $cmd |& tee -a $log
endif

#Use FSL to do a linear registertion between T1 and MNI152
if ( ! -e ${aout}_free_to_MNI152.mat || $?force == 1 ) then
	set cmd = ( $FSLDIR/bin/flirt -in ${aout}_brainmask -omat ${aout}_free_to_MNI152.mat )
	set cmd = ( $cmd -ref ${FSLDIR}/data/standard/MNI152_T1_2mm_brain )
	set cmd = ( $cmd -init  ${aout}_free_to_std.mat -o ${aout}_free_warped_to_MNI152 )
	echo $cmd |& tee -a $log; $cmd |& tee -a $log
endif

#Use FSL to do a nonlinear registration between T1 and MNI152
if ( ! -e ${aout}_free_to_MNI152_coef.nii.gz || $?force == 1 ) then
	set cmd = ( $FSLDIR/bin/fnirt --in=${aout}_T1 --aff=${aout}_free_to_MNI152.mat )
	set cmd = ( $cmd --config=T1_2_MNI152_2mm.cnf --jacrange=0_1,10 )
	set cmd = ( $cmd --cout=${aout}_free_to_MNI152_coef --jout=${aout}_free_to_MNI152_jac )
	echo $cmd |& tee -a $log; $cmd |& tee -a $log
endif

#Use FSL to apply nonlinear registration to brainmask
if ( ! -e ${aout}_free_warped_to_MNI152.nii.gz || $?force == 1 ) then
	set cmd = ( $FSLDIR/bin/applywarp --in=${aout}_brainmask --out=${aout}_free_warped_to_MNI152 )
	set cmd = ( $cmd --ref=${FSLDIR}/data/standard/MNI152_T1_2mm_brain )
	set cmd = ( $cmd --warp=${aout}_free_to_MNI152_coef )
	set cmd = ( $cmd --mask=${FSLDIR}/data/standard/MNI152_T1_2mm_brain_mask )
	echo $cmd |& tee -a $log; $cmd |& tee -a $log
endif

#Use FSL to apply nonlinear registration to BOLD data
if ( ! -e ${aout}_bold_warped_to_MNI152.nii.gz || $?force == 1 ) then
	set cmd = ( $FSLDIR/bin/applywarp --in=$bold_ref --out=${aout}_bold_warped_to_MNI152 )
	set cmd = ( $cmd --ref=${FSLDIR}/data/standard/MNI152_T1_2mm_brain )
	set cmd = ( $cmd --premat=${aout}_bold_to_free.mat --warp=${aout}_free_to_MNI152_coef )
	set cmd = ( $cmd --mask=${FSLDIR}/data/standard/MNI152_T1_2mm_brain_mask )
	echo $cmd |& tee -a $log; $cmd |& tee -a $log
endif

#Use FSL to upscale FreeSurfer brainmask in order to speed up invwarp
if ( ! -e ${aout}_brainmask_2mm.nii.gz || $?force == 1 ) then
	set cmd = ( $FSLDIR/bin/flirt -in ${aout}_brainmask -ref ${aout}_brainmask )
	set cmd = ( $cmd -applyisoxfm 2 -o ${aout}_brainmask_2mm )
	echo $cmd |& tee -a $log; $cmd |& tee -a $log
endif

#Use FSL to invert warp to get a MNI152 to T1 warp
if ( ! -e ${aout}_MNI152_to_free_coef.nii.gz || $?force == 1 ) then
	set cmd = ( $FSLDIR/bin/invwarp --ref=${aout}_brainmask --warp=${aout}_free_to_MNI152_coef )
	set cmd = ( $cmd --out=${aout}_MNI152_to_free_coef --force )
	echo $cmd |& tee -a $log; $cmd |& tee -a $log
endif

#Use FSL to get a warp from MNI152 space to BOLD space
if ( ! -e ${aout}_MNI152_to_bold_coef.nii.gz || $?force == 1 ) then
	set cmd = ( $FSLDIR/bin/convertwarp --warp1=${aout}_MNI152_to_free_coef --ref=$bold_ref )
	set cmd = ( $cmd --postmat=${aout}_free_to_bold.mat --out=${aout}_MNI152_to_bold_coef )
	echo $cmd |& tee -a $log; $cmd |& tee -a $log
endif
		
#########################
###Confound Regressors###
#########################
 set rdir = $outdir/regress; if ( ! -d $rdir ) mkdir $rdir; set rout = $rdir/$root 
 
foreach tissue ( "ventricles" "wm" "wb" )	
	if ( $tissue == "wb" ) then
		if ( ( ! -e ${rout}_wb_bold_mask.nii.gz || $?force == 1 ) && $?wbreg == 1 ) then
			set cmd = ( cp $bold_mask.nii.gz $outdir/regress/ )
			echo $cmd |& tee -a $log; $cmd |& tee -a $log
		else
			continue
		endif
	else
		#Use FreeSurfer to tissue masks
		if ( ! -e ${rout}_${tissue}.nii.gz || $?force == 1 ) then
			set cmd = ( $FREESURFER_HOME/bin/mri_binarize --i $SUBJECTS_DIR/$subj/mri/aseg.mgz )
			set cmd = ( $cmd --$tissue --erode 1 --o ${rout}_${tissue}.nii.gz )
			echo $cmd |& tee -a $log; $cmd |& tee -a $log
		endif
		#Use FSL to transform masks to bold space
		if ( ! -e ${rout}_${tissue}_bold.nii.gz || $?force == 1 ) then
			set cmd = ( $FSLDIR/bin/applywarp -i ${rout}_${tissue} --premat=${aout}_free_to_bold.mat )
			set cmd = ( $cmd -r ${bold_ref} -o ${rout}_${tissue}_bold )
			echo $cmd |& tee -a $log; $cmd |& tee -a $log
		endif
		#Use FSL to rebinarize masks in bold space
		if ( ! -e ${rout}_${tissue}_bold_mask.nii.gz || $?force == 1 ) then
			set cmd = ( $FSLDIR/bin/fslmaths ${rout}_${tissue}_bold )
			set cmd = ( $cmd -thr 0_5 -bin ${rout}_${tissue}_bold_mask )
			echo $cmd |& tee -a $log; $cmd |& tee -a $log
		endif
	endif
	#Use FSL to generate regressor timecourse
	if ( ! -e ${rout}_${tissue}_regressor.txt || $?force == 1 ) then
		set cmd = ( $FSLDIR/bin/fslmeants -i ${bpre} -m ${rout}_${tissue}_bold_mask )
		set cmd = ( $cmd --eig -o ${rout}_${tissue}_regressor.txt )
		echo $cmd |& tee -a $log; $cmd |& tee -a $log
	endif
end

#Copy over motion regressor
if ( ! -e ${rout}_mc_regressor.txt || $?force == 1 ) then
	set cmd = ( cp ${mcf}.par ${rout}_mc_regressor.txt )
	echo $cmd |& tee -a $log; $cmd |& tee -a $log
endif

#Use FSL to get motion outliers regression file
if ( ! -e ${rout}_mc_outliers.txt || $?force == 1 ) then
	set cmd = ( $FSLDIR/bin/fsl_motion_outliers ${bout}_bold_eq 0 ${rout}_mc_outliers.txt )
	echo $cmd |& tee -a $log; $cmd |& tee -a $log
endif

#Paste together all the nusiance regressors
if ( ! -e ${rout}_nusiance_regressors.txt || $?force == 1 ) then
	set cmd = ( paste ${rout}_mc_regressor.txt ${rout}_mc_outliers.txt  )
	set cmd = ( $cmd ${rout}_wm_regressor.txt ${rout}_ventricles_regressor.txt )
	if ( $?wbreg == 1 ) set cmd = ( $cmd ${rout}_wb_regressor.txt )
	echo $cmd '>' ${rout}_nusiance_regressors.txt |& tee -a $log; $cmd > ${rout}_nusiance_regressors.txt |& tee -a $log
endif

#Create a filtered 4D timeseries
if ( ! -e ${bpre}_res.nii.gz || $?force == 1 ) then 
	set nreg = `awk '{print NF;exit}' ${rout}_nusiance_regressors.txt`
	set reglist = "1"; @ k = 2; 
	while ( $k <= $nreg ) 
		set reglist = "${reglist},${k}"; @ k++
	end
	set cmd = ( $FSLDIR/bin/fsl_regfilt -i ${bpre} -o ${bpre}_res -f "$reglist" )
	set cmd = ( $cmd -d ${rout}_nusiance_regressors.txt )
	echo $cmd |& tee -a $log; $cmd |& tee -a $log
endif

#Use FSL to get bold residual standard deviation image
if ( ! -e ${bpre}_res_stdev.nii.gz || $?force == 1 ) then
		set cmd = ( $FSLDIR/bin/fslmaths ${bpre}_res -Tstd ${bpre}_res_stdev )
		echo $cmd |& tee -a $log; $cmd |& tee -a $log
endif

#######################
###Quality Assurance###
#######################
set qdir = $outdir/qa; if ( ! -d $qdir ) mkdir $qdir; set qout = $qdir/$root

#Use FSL to create motion plots
if ( ! -e ${qout}_bold_rot.png || ! -e ${qout}_bold_trans.png || ! -e ${qout}_bold_disp.png || $?force == 1 ) then
	#Rotation Plot
	set cmd = ( ${FSLDIR}/bin/fsl_tsplot -i ${mcf}.par -u 1 --start=1 --finish=3 )
	set cmd = ( $cmd -a x,y,z -w 640 -h 144 -o ${qout}_bold_rot.png )
	echo $cmd -t 'Estimated rotations (radians)' |& tee -a $log
	$cmd -t 'Estimated rotations (radians)' |& tee -a $log
	
	#Translation Plot
	set cmd = ( ${FSLDIR}/bin/fsl_tsplot -i ${mcf}.par -u 1 --start=4 --finish=6 )
	set cmd = ( $cmd -a x,y,z -w 640 -o ${qout}_bold_trans.png -h 144 )
	echo $cmd -t 'Estimated translations (mm)' |& tee -a $log
	$cmd -t 'Estimated translations (mm)' |& tee -a $log
	
	#Displacement Plot
	set cmd = ( ${FSLDIR}/bin/fsl_tsplot -a absolute,relative -o ${qout}_bold_disp.png )
	set cmd = ( $cmd -i ${mcf}_abs.rms,${mcf}_rel.rms -u 1 -w 640 -h 144 )
	echo $cmd -t 'Estimated mean displacement (mm)' |& tee -a $log
	$cmd -t 'Estimated mean displacement (mm)' |& tee -a $log
endif

#Setup slicer and png_append options
set sliceropts = ( -s 2 -x 0.5 sla.png -x 0.45 slb.png -x 0.55 slc.png -x 0.65 sld.png -y 0.35 \
					sle.png -y 0.45 slf.png -y 0.55 slg.png -y 0.65 slh.png -z 0.35 sli.png \
					-z 0.45 slj.png -z 0.55 slk.png -z 0.65 sll.png )
set appendopts = ( sla.png + slb.png + slc.png + sld.png + sle.png + slf.png + slg.png + slh.png \
					+ sli.png + slj.png + slk.png + sll.png )

#Use FSL to get brain mask QA image
if ( ! -e ${qout}_bold_brain_mask_qa.png || $?force == 1 ) then
	#Get non-eroded qa image
	set cmd = ( $FSLDIR/bin/slicer ${bold_ref} $bold_mask $sliceropts )
	echo $cmd |& tee -a $log; $cmd |& tee -a $log
	set cmd = ( $FSLDIR/bin/pngappend $appendopts ${qout}_bold_brain_mask_qa.png )
	echo $cmd |& tee -a $log; $cmd |& tee -a $log
	
	#Cleanup
	echo rm sl?.png |& tee -a $log; rm sl?.png |& tee -a $log
endif

#Use FSL to get bold standard deviation QA
if ( ! -e ${qout}_bold_stdev_qa.png ) then
	#Get before residual qa image
	set cmd = ( $FSLDIR/bin/slicer ${bout}_bold_eq_stdev $sliceropts )
	echo $cmd |& tee -a $log; $cmd |& tee -a $log
	set cmd = ( $FSLDIR/bin/pngappend $appendopts ${qout}_bold_stdev_qa1.png )
	echo $cmd |& tee -a $log; $cmd |& tee -a $log
	
	#Get after residual qa image
	set cmd = ( $FSLDIR/bin/slicer ${bpre}_res_stdev $sliceropts )
	echo $cmd |& tee -a $log; $cmd |& tee -a $log
	set cmd = ( $FSLDIR/bin/pngappend $appendopts ${qout}_bold_stdev_qa2.png )
	echo $cmd |& tee -a $log; $cmd |& tee -a $log
	
	#Combine QA images
	set cmd = ( $FSLDIR/bin/pngappend ${qout}_bold_stdev_qa1.png )
	set cmd = ( $cmd - ${qout}_bold_stdev_qa2.png ${qout}_bold_stdev_qa.png )
	echo $cmd |& tee -a $log; $cmd |& tee -a $log
	
	#Cleanup
	echo rm sl?.png |& tee -a $log; rm sl?.png |& tee -a $log
endif

#Use FSL to get distortion correction QA
if ( $?nodist == 0 && ( ! -e ${qout}_bold_distcorrect.png || $?force == 1 ) ) then
	#Get distorted images
	set cmd = ( $FSLDIR/bin/slicer ${uout}_epi_${refvol}_brain $sliceropts )
	echo $cmd |& tee -a $log; $cmd |& tee -a $log
	set cmd = ( $FSLDIR/bin/pngappend $appendopts ${qout}_bold_distorted.png )
	echo $cmd |& tee -a $log; $cmd |& tee -a $log
	
	#Get undistorted images
	set cmd = ( $FSLDIR/bin/slicer $bold_ref $sliceropts )
	echo $cmd |& tee -a $log; $cmd |& tee -a $log
	set cmd = ( $FSLDIR/bin/pngappend $appendopts ${qout}_bold_undistorted.png )
	echo $cmd |& tee -a $log; $cmd |& tee -a $log
	
	#Combine Images
	set cmd = ( $FSLDIR/bin/pngappend ${qout}_bold_distorted.png - ${qout}_bold_undistorted.png )
	set cmd = ( $cmd ${qout}_bold_distcorrect.png )
	echo $cmd |& tee -a $log; $cmd |& tee -a $log
	
	#Cleanup
	echo rm sl?.png |& tee -a $log; rm sl?.png |& tee -a $log
endif

#Use FSL to get bold/free registration QA
if ( ! -e ${qout}_bold_to_free_std_qa.png || $?force == 1 ) then
	#Use FSL transform bold ref to T1 with standard orientation
	set cmd = ( $FSLDIR/bin/flirt -in ${bold_ref} -ref ${aout}_T1_std -applyxfm -init )
	set cmd = ( $cmd ${aout}_bold_to_free_std.mat -o ${qout}_bold_to_free_std )
	echo $cmd |& tee -a $log; $cmd |& tee -a $log
	
	#Use FSL to bold to standard free QA image with T1 as outlines
	set cmd = ( $FSLDIR/bin/slicer ${qout}_bold_to_free_std ${aout}_T1_std $sliceropts )
	echo $cmd |& tee -a $log; $cmd |& tee -a $log
	set cmd = ( $FSLDIR/bin/pngappend $appendopts ${qout}_bold_to_free_std_qa1.png )
	echo $cmd |& tee -a $log; $cmd |& tee -a $log
	
	#Use FSL to bold to standard free QA image with resampled bold as outlines
	set cmd = ( $FSLDIR/bin/slicer ${aout}_T1_std ${qout}_bold_to_free_std $sliceropts )
	echo $cmd |& tee -a $log; $cmd |& tee -a $log
	set cmd = ( $FSLDIR/bin/pngappend $appendopts ${qout}_bold_to_free_std_qa2.png )
	echo $cmd |& tee -a $log; $cmd |& tee -a $log
	
	#Combine QA images
	set cmd = ( $FSLDIR/bin/pngappend ${qout}_bold_to_free_std_qa1.png )
	set cmd = ( $cmd - ${qout}_bold_to_free_std_qa2.png ${qout}_bold_to_free_std_qa.png )
	echo $cmd |& tee -a $log; $cmd |& tee -a $log
	
	#Cleanup
	echo rm sl?.png |& tee -a $log; rm sl?.png |& tee -a $log
endif

#Use FSL to get free to MNI 152 space QA
if ( ! -e ${qout}_free_to_MNI152_qa.png || $?force == 1 ) then
	#Use FSL to get free to MNI152 QA (MNI Outlines)
	set cmd = ( $FSLDIR/bin/slicer ${aout}_free_warped_to_MNI152 )
	set cmd = ( $cmd ${FSLDIR}/data/standard/MNI152_T1_2mm_brain $sliceropts )
	echo $cmd |& tee -a $log; $cmd |& tee -a $log
	set cmd = ( $FSLDIR/bin/pngappend $appendopts ${qout}_free_to_MNI152_qa1.png )
	echo $cmd |& tee -a $log; $cmd |& tee -a $log
	
	#Use FSL to get free to MNI 152 QA (free standard outlines)
	set cmd = ( $FSLDIR/bin/slicer ${FSLDIR}/data/standard/MNI152_T1_2mm_brain )
	set cmd = ( $cmd ${aout}_free_warped_to_MNI152 $sliceropts )
	echo $cmd |& tee -a $log; $cmd |& tee -a $log
	set cmd = ( $FSLDIR/bin/pngappend $appendopts ${qout}_free_to_MNI152_qa2.png )
	echo $cmd |& tee -a $log; $cmd |& tee -a $log
	
	#Combine QA Images
	set cmd = ( $FSLDIR/bin/pngappend ${qout}_free_to_MNI152_qa1.png )
	set cmd = ( $cmd - ${qout}_free_to_MNI152_qa2.png ${qout}_free_to_MNI152_qa.png )
	echo $cmd |& tee -a $log; $cmd |& tee -a $log	
	
	#Cleanup
	echo rm sl?.png |& tee -a $log; rm sl?.png |& tee -a $log
endif

#Use FSL to get bold to MNI 152 space QA
if ( ! -e ${qout}_bold_to_MNI152_qa.png || $?force == 1 ) then
	#Use FSL to get free to MNI152 QA (MNI Outlines)
	set cmd = ( $FSLDIR/bin/slicer ${aout}_bold_warped_to_MNI152)
	set cmd = ( $cmd ${FSLDIR}/data/standard/MNI152_T1_2mm_brain $sliceropts )
	echo $cmd |& tee -a $log; $cmd |& tee -a $log
	set cmd = ( $FSLDIR/bin/pngappend $appendopts ${qout}_bold_to_MNI152_qa1.png )
	echo $cmd |& tee -a $log; $cmd |& tee -a $log
	
	#Use FSL to get free to MNI 152 QA (free standard outlines)
	set cmd = ( $FSLDIR/bin/slicer ${FSLDIR}/data/standard/MNI152_T1_2mm_brain )
	set cmd = ( $cmd ${qout}_bold_warped_to_MNI152 $sliceropts )
	echo $cmd |& tee -a $log; $cmd |& tee -a $log
	set cmd = ( $FSLDIR/bin/pngappend $appendopts ${qout}_bold_to_MNI152_qa2.png )
	echo $cmd |& tee -a $log; $cmd |& tee -a $log
	
	#Combine QA Images
	set cmd = ( $FSLDIR/bin/pngappend ${qout}_bold_to_MNI152_qa1.png )
	set cmd = ( $cmd - ${qout}_bold_to_MNI152_qa2.png ${qout}_bold_to_MNI152_qa.png )
	echo $cmd |& tee -a $log; $cmd |& tee -a $log	
	
	#Cleanup
	echo rm sl?.png |& tee -a $log; rm sl?.png |& tee -a $log
endif

#Put Everything in a QA webpage
if ( ! -e ${qout}_bold_qa_index.html || $?force == 1 ) then
	echo "Creating QA webpage at: `pwd`/${qout}_bold_qa_index.html" |& tee -a $log
	#Create webpages
	set web_list = ( ${qout}_bold_qa_mc.html ${qout}_bold_qa_bmsk.html \
		  			 ${qout}_bold_qa_reg.html ${qout}_bold_qa_stdev.html \
		  			 ${qout}_bold_qa_index.html )
	touch $web_list
	
	#Setup header
	echo '<html><body bgcolor="gray">' | tee $web_list > /dev/null
	echo "<center><h1>${program}: ${subj} Quick QA</center></h1>" | tee -a $web_list > /dev/null
	echo "<center><a href=${root}_bold_qa_mc.html>Motion_Correction</a href> - \
		  <a href=${root}_bold_qa_bmsk.html>Brain Masking</a href> - \
		  <a href =${root}_bold_qa_stdev.html>Standard Deviation</a href> -\
		  <a href=${root}_bold_qa_reg.html>Registration</a ref></center> " | tee -a $web_list > /dev/null
	
	#Setup Motion Correction
	echo "<hr><h2>Motion Correction</h2>" >> ${qout}_bold_qa_mc.html
	set reldisp = `cat ${mcf}_rel_mean.rms`; set absdisp = `cat ${mcf}_abs_mean.rms`
	set mc_outliers = `grep "Found spikes at" $log | tail -1 | sed 's/Found spikes at //g'`
	if ( "$mc_outliers" == "" ) set mc_outliers = "No outliers found."
	echo "MCFLIRT Estimated Displacements(mm): Absolute=$absdisp Relative=$reldisp" >> ${qout}_bold_qa_mc.html
	echo "<br>fsl_motion_outliers estimated outliers at frames: $mc_outliers" >> ${qout}_bold_qa_mc.html
	echo "<p><IMG BORDER=0 SRC=${root}_bold_rot.png>" >> ${qout}_bold_qa_mc.html
	echo "<p><IMG BORDER=0 SRC=${root}_bold_trans.png>" >> ${qout}_bold_qa_mc.html
	echo "<p><IMG BORDER=0 SRC=${root}_bold_disp.png>" >> ${qout}_bold_qa_mc.html
	
	#Setup Brain Masking
	echo "<hr><h2>Brain Masking</h2>" >> ${qout}_bold_qa_bmsk.html
	if ( $?nodist == 0 ) then
		echo "Mask was generated from field map magnitude image and transformed to BOLD space." >> ${qout}_bold_qa_bmsk.html
	else
		echo "Mask was generated using BET with the -R and -f $bthresh options" >>${qout}_bold_qa_bmsk.html
	endif
	echo "<p><IMG BORDER=0 SRC=${root}_bold_brain_mask_qa.png>" >> ${qout}_bold_qa_bmsk.html
		 
	#Setup Standard Deviation Image
	echo "<hr><h2>Standard Deviation Images</h2>" >> ${qout}_bold_qa_stdev.html
	echo "Row 1: Before Residual Temporal Standard Deviation. \
		  Row 2: After Residual Temporal Standard Deviation. \
		 <p><IMG BORDER=0 SRC=${root}_bold_stdev_qa.png>" >> ${qout}_bold_qa_stdev.html
		 
	#Setup Registration
	echo "<hr><h2>Registration</h2>" >>  ${qout}_bold_qa_reg.html
	if ( $?nodist == 0 ) then
		echo "BOLD Distortion Correction (Distorted=Top, Undistorted=Bottom)" >> ${qout}_bold_qa_reg.html
		echo "<p><IMG BORDER=0 SRC=${root}_bold_distcorrect.png WIDTH=2000><p>" >> ${qout}_bold_qa_reg.html
	endif
	set bbcost = `awk '{print $1}' ${aout}_bold_to_free.dat.mincost`
	echo "BOLD to FreeSurfer T1 - bbregister final cost: $bbcost " >> ${qout}_bold_qa_reg.html
	echo "<p><IMG BORDER=0 SRC=${root}_bold_to_free_std_qa.png WIDTH=2000>" >> ${qout}_bold_qa_reg.html
	echo "<p>Nonlinear Registration of Freesurfer T1 to MNI152 T1 2MM" >> ${qout}_bold_qa_reg.html
	echo "<p><IMG BORDER=0 SRC=${root}_free_to_MNI152_qa.png WIDTH=2000>" >> ${qout}_bold_qa_reg.html
	echo "<p>Nonlinear Registration of BOLD to MNI152 T1 2MM" >> ${qout}_bold_qa_reg.html
	echo "<p><IMG BORDER=0 SRC=${root}_bold_to_MNI152_qa.png WIDTH=2000>" >> ${qout}_bold_qa_reg.html
endif

echo "" |& tee -a $log
echo "#######################################" |& tee -a $log
echo "#######################################" |& tee -a $log
echo "" |& tee -a $log
echo "${program} is DONE" |& tee -a $log
echo "End Time: `date '+%Y-%m-%d-%I-%M-%S'`" |& tee -a $log
echo "" |& tee -a $log
echo "#######################################" |& tee -a $log
echo "#######################################" |& tee -a $log
